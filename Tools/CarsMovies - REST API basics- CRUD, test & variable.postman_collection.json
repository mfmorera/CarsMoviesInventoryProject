{
	"info": {
		"_postman_id": "ebd69c8a-c41e-471f-bd85-a90a14d1c3d4",
		"name": "CarsMovies - REST API basics: CRUD, test & variable",
		"description": "Este manuall proporciona una gu√≠a detallada para interactuar con la API  \nCarsMovies utilizando Postman. Aprender√°s a realizar operaciones CRUD  \n(Crear, Leer, Actualizar y Eliminar), gestionar variables y escribir  \npruebas automatizadas.\n\n## üìå Introducci√≥n\n\nEsta  \nAPI permite manejar informaci√≥n sobre pel√≠culas de autos. Podr√°s  \nconsultar, agregar, actualizar y eliminar datos mediante solicitudes  \nHTTP.\n\n---\n\n## üîñ C√≥mo usar este manual\n\n### **Paso 1: Enviar solicitudes**\n\nLas API RESTful permiten realizar operaciones CRUD utilizando los m√©todos HTTP POST, GET, PUT y DELETE.\n\nEsta colecci√≥n contiene cada uno de estos tipos de solicitud. Abre cada solicitud y haz clic en \"Send\" para ver qu√© sucede.\n\n### **Paso 2: Ver respuestas**\n\nObserva  \nla pesta√±a de respuesta para verificar el c√≥digo de estado (200 OK), el  \ntiempo de respuesta y el tama√±o de los datos recibidos.\n\n### **Paso 3: Enviar nuevos datos en el Body**\n\nEn las solicitudes POST y PUT, puedes agregar o actualizar informaci√≥n enviando un cuerpo JSON en la pesta√±a \"Body\".\n\nEjemplo de cuerpo JSON:\n\n{ \"carMovieName\": \"Speed Racer\", \"carMovieYear\": \"2008\", \"duration\": 135}\n\n### **Paso 4: Actualizar variables**\n\nLas variables permiten almacenar y reutilizar valores en Postman. En esta colecci√≥n, hemos creado una variable `base_url` con la URL de muestra `https://postman-rest-api-learner.glitch.me/`. C√°mbiala por la URL de tu API para personalizar la colecci√≥n.\n\n### **Paso 5: Agregar pruebas en la pesta√±a \"Scripts\"**\n\nPuedes  \nescribir scripts en JavaScript para verificar que la API funcione  \ncorrectamente. Los resultados de las pruebas aparecer√°n en la pesta√±a  \n\"Test Results\".\n\nEjemplo de prueba para verificar el c√≥digo de estado:\n\npm.test(\"Status code is 200\", function () { pm.response.to.have.status(200);});\n\n---\n\n## üöÄ Endpoints Disponibles\n\n### **1\\. Obtener datos - Lista de pel√≠culas**\n\n**M√©todo:** GET  \n**URL:** `{{hostname}}/api/v1/carsmovies?page=0&size=5&sort=carMovieYear,desc`\n\n**Descripci√≥n:** Obtiene una lista paginada de pel√≠culas de autos.\n\n**Prueba asociada:**\n\npm.test(\"Status code is 200\", function () { pm.response.to.have.status(200);});\n\n---\n\n### **2\\. Obtener datos - Pel√≠cula espec√≠fica**\n\n**M√©todo:** GET  \n**URL:** `{{hostname}}/api/v1/carsmovies/{id}`\n\n**Descripci√≥n:** Obtiene la informaci√≥n de una pel√≠cula espec√≠fica mediante su ID.\n\n**Prueba asociada:**\n\npm.test(\"Status code is 200\", function () { pm.response.to.have.status(200);});\n\n---\n\n### **3\\. Crear nueva pel√≠cula**\n\n**M√©todo:** POST  \n**URL:** `{{hostname}}/api/v1/carsmovies`\n\n**Cuerpo JSON:**\n\n{ \"carMovieName\": \"Speed Racer\", \"carMovieYear\": \"2008\", \"duration\": 135}\n\n**Prueba asociada:**\n\npm.test(\"Successful POST request\", function () { pm.expect(pm.response.code).to.be.oneOf(\\[200, 201\\]);});\n\n---\n\n### **4\\. Actualizar pel√≠cula**\n\n**M√©todo:** PUT  \n**URL:** `{{hostname}}/api/v1/carsmovies/{id}`\n\n**Cuerpo JSON:**\n\n{ \"carMovieName\": \"Speed Racer\", \"carMovieYear\": \"2008\", \"duration\": 135}\n\n**Prueba asociada:**\n\npm.test(\"Successful PUT request\", function () { pm.expect(pm.response.code).to.be.oneOf(\\[200, 201, 204\\]);});\n\n---\n\n### **5\\. Eliminar pel√≠cula**\n\n**M√©todo:** DELETE  \n**URL:** `{{hostname}}/api/v1/carsmovies/{id}`\n\n**Prueba asociada:**\n\npm.test(\"Successful DELETE request\", function () { pm.expect(pm.response.code).to.be.oneOf(\\[200, 202, 204\\]);});\n\n---\n\n## üí™ Consejos Pro\n\n- Usa carpetas en Postman para organizar solicitudes relacionadas.\n    \n- Agrega m√°s scripts de prueba para verificar que la API funciona correctamente y automatizar flujos de trabajo.\n    \n\n## üí° Recursos Relacionados\n\n- [Conceptos b√°sicos de pruebas de API](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)\n    \n- [Documentaci√≥n de API](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)\n    \n- [M√©todos de autorizaci√≥n](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7229477"
	},
	"item": [
		{
			"name": "Get data - Control filters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/carsmovies?page=0&size=5&sort=carMovieYear,desc",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"carsmovies"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "5"
						},
						{
							"key": "sort",
							"value": "carMovieYear,desc"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get data - Single item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{hostname}}/api/v1/carsmovies/07028b1c-82ad-4144-95cf-ea03b3d1d0fd",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"carsmovies",
						"07028b1c-82ad-4144-95cf-ea03b3d1d0fd"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data - Single item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"carMovieName\": \"Speed Racer\",\n    \"carMovieYear\": \"2008\",\n    \"duration\": 135\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/v1/carsmovies",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"carsmovies"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data - Single item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"carMovieName\": \"Speed Racer\",\n    \"carMovieYear\": \"2008\",\n    \"duration\": 135\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/v1/carsmovies/999e9999-e89b-12d3-a456-426614174099",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"carsmovies",
						"999e9999-e89b-12d3-a456-426614174099"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data - Single item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{hostname}}/api/v1/carsmovies/999e9999-e89b-12d3-a456-426614174099",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"api",
						"v1",
						"carsmovies",
						"999e9999-e89b-12d3-a456-426614174099"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "hostname",
			"value": "http://127.0.0.1:8080",
			"type": "string"
		}
	]
}
